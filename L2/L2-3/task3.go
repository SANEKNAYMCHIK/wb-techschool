package main

import (
	"fmt"
	"os"
)

func Foo() error {
	var err *os.PathError = nil
	return err
}

func main() {
	err := Foo()
	fmt.Println(err)
	fmt.Println(err == nil)
}

// Программа выведет сначала nil, а затем false, так как переменной err мы присвоили
// тип *os.PathError со значением nil и возвращается переменная error как тип error(интерфейс)
// При первом выводе fmt.Println(): проверятеся сначала значение интерфейса и если оно nil, то выводится nil
// А оно как раз nil, поэтому выводится nil.
// При втором вызове и сравнении с nil, Go проверяет всю структуру интерфейса(тип и значение)
// И если и тип и значение равняется nil, то в таком случае выведется true,
// если же тип не nil, то при сравнении интерфейса с nil, выведется false.

// Интерфейс в Go состоит из двух компонентов:
// Тип (dynamic type) - конкретный тип значения
// Значение (dynamic value) - конкретное значение

// type iface struct {
//     tab  *itab          // информация о типе
//     data unsafe.Pointer // указатель на данные
// }

// Обычный интерфейс (как error):
// Имеет предопределенный набор методов
// Может хранить только значения типов, которые реализуют эти методы

// Пустой интерфейс (interface{}):
// Не имеет методов
// Может хранить значения любого типа(используется когда тип неизвестен)

// var empty interface{} --- действительно nil
// var withType error = (*Error)(nil) --- не nil (имеет тип)
